class Table{

synchronized static void printTable(int n){

   for(int i=1;i<=10;i++){
     System.out.println(n*i);
     try{
       Thread.sleep(400);
     }catch(Exception e){}
   }
  
} 

}

//Друг вариант, но работи по друг начин
/*
class Table{

 void printTable(int n){
synchronized(this){
   for(int i=1;i<=10;i++){
     System.out.println(n*i);
     try{
       Thread.sleep(400);
     }catch(Exception e){}
   }
 }//synchronized
} 

}
*/


class MyThread1 extends Thread  {
public void run(){
/*Table t=new Table();//1-true
t.printTable(1);*/
new Table().printTable(1);//2-true
//Table.printTable(1);//3-true
 
}
}

class MyThread2 extends Thread{
public void run(){
//Table.printTable(10);
new Table().printTable(10);
}
}

class MyThread3 extends Thread{
public void run(){
//Table.printTable(100);
new Table().printTable(100);
}
}




class MyThread4 extends Thread{
public void run(){
//Table.printTable(1000);
new Table().printTable(1000);
}
}

public class Main{
public static void main(String t[]){
MyThread1 t1=new MyThread1();
MyThread2 t2=new MyThread2();
MyThread3 t3=new MyThread3();
MyThread4 t4=new MyThread4();
t1.start();
t2.start();
t3.start();
t4.start();
}
}
